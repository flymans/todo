{"version":3,"sources":["components/AddTaskBar/TaskList/index.js","components/Footer/index.js","components/AddTaskBar/index.js","components/Header/index.js","App.js","index.js"],"names":["TaskList","list","taskChangeState","deleteTask","className","map","toDoItem","List","key","id","type","checked","active","onClick","htmlFor","cn","value","Button","circular","floated","icon","Footer","counter","clear","showButton","AddTaskBar","state","text","toDoList","status","handleChange","e","name","setState","handleSubmit","preventDefault","_","uniqueId","updatedList","filter","item","length","updatedToDoItem","index","indexOf","update","$set","deleteFinishedTasks","taskFilter","filterOption","target","textContent","toLowerCase","filterList","Error","onUnload","localStorage","setItem","JSON","stringify","lsToDoList","parse","getItem","lsStatus","window","addEventListener","this","mappedList","removeEventListener","Group","fluid","disabled","Form","onSubmit","Input","onChange","action","required","placeholder","React","Component","Header","href","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebf3d3c8.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport {Button, List} from 'semantic-ui-react';\nimport './styles.css';\n\nconst TaskList = ({list, taskChangeState, deleteTask}) => {\n    const renderTask = filteredList =>\n        filteredList.map(toDoItem => (\n            <List key={toDoItem.id}>\n                <div className=\"todo-item__container\">\n                    <input\n                        type=\"checkbox\"\n                        id={`todo-item__${toDoItem.id}`}\n                        checked={!toDoItem.active}\n                        onClick={taskChangeState(toDoItem)}\n                    />\n                    <label\n                        htmlFor={`todo-item__${toDoItem.id}`}\n                        className={cn({\n                            'todo-toDoItem': true,\n                            active: toDoItem.active\n                        })}\n                    >\n                        {toDoItem.value}\n                    </label>\n                    <Button\n                        onClick={deleteTask(toDoItem.id)}\n                        circular\n                        floated=\"right\"\n                        icon=\"trash\"\n                    />\n                </div>\n            </List>\n        ));\n    return <ul className=\"todo-list\">{renderTask(list)}</ul>;\n};\n\nTaskList.propTypes = {\n    list: PropTypes.arrayOf(PropTypes.object).isRequired,\n    taskChangeState: PropTypes.func.isRequired,\n    deleteTask: PropTypes.func.isRequired\n};\n\nexport default TaskList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Button} from 'semantic-ui-react';\nimport './styles.css';\n\nconst Footer = ({counter, clear, showButton}) => (\n    <footer className=\"main-footer\">\n        <span className=\"main-footer__counter\">{counter} task left</span>\n        {showButton && (\n            <Button className=\"main-footer__clear\" onClick={clear}>\n                Clear finished tasks\n            </Button>\n        )}\n    </footer>\n);\n\nFooter.propTypes = {\n    counter: PropTypes.number.isRequired,\n    clear: PropTypes.func.isRequired,\n    showButton: PropTypes.bool.isRequired\n};\nexport default Footer;\n","import React from 'react';\r\nimport update from 'immutability-helper';\r\nimport _ from 'lodash';\r\nimport {Button, Form} from 'semantic-ui-react';\r\nimport TaskList from './TaskList';\r\nimport Footer from '../Footer';\r\n\r\nimport './styles.css';\r\n\r\nexport default class AddTaskBar extends React.Component {\r\n    state = {\r\n        text: '',\r\n        toDoList: [],\r\n        status: 'all',\r\n        counter: 0\r\n    };\r\n\r\n    componentDidMount() {\r\n        const lsToDoList = JSON.parse(localStorage.getItem('toDoList'));\r\n        const lsStatus = localStorage.getItem('status');\r\n        window.addEventListener('beforeunload', this.onUnload);\r\n        if (lsToDoList) {\r\n            const mappedList = lsToDoList.map(toDoItem => ({\r\n                ...toDoItem,\r\n                id: _.uniqueId()\r\n            }));\r\n            const counter = mappedList.filter(toDoItem => toDoItem.active)\r\n                .length;\r\n            this.setState({toDoList: mappedList, status: lsStatus, counter});\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('beforeunload', this.onUnload);\r\n    }\r\n\r\n    handleChange = (e, {name, value}) => this.setState({[name]: value});\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        const {text, toDoList} = this.state;\r\n        const toDoItem = {id: _.uniqueId(), value: text, active: true};\r\n        const updatedList = [...toDoList, toDoItem];\r\n        const counter = updatedList.filter(item => item.active).length;\r\n        this.setState({text: '', toDoList: updatedList, counter});\r\n    };\r\n\r\n    taskChangeState = toDoItem => () => {\r\n        const {toDoList} = this.state;\r\n        const updatedToDoItem = {...toDoItem, active: !toDoItem.active};\r\n        const index = toDoList.indexOf(toDoItem);\r\n        const updatedList = update(toDoList, {\r\n            [index]: {$set: {...updatedToDoItem}}\r\n        });\r\n        const counter = updatedList.filter(item => item.active).length;\r\n        this.setState({toDoList: updatedList, counter});\r\n    };\r\n\r\n    deleteTask = id => e => {\r\n        e.preventDefault();\r\n        const {toDoList} = this.state;\r\n        const updatedList = toDoList.filter(toDoItem => toDoItem.id !== id);\r\n        const counter = updatedList.filter(toDoItem => toDoItem.active).length;\r\n        this.setState({toDoList: updatedList, counter});\r\n    };\r\n\r\n    deleteFinishedTasks = () => {\r\n        const {toDoList} = this.state;\r\n        const updatedList = toDoList.filter(toDoItem => toDoItem.active);\r\n        this.setState({toDoList: updatedList});\r\n    };\r\n\r\n    taskFilter = e => {\r\n        e.preventDefault();\r\n        const filterOption = e.target.textContent.toLowerCase();\r\n        this.setState({status: filterOption});\r\n    };\r\n\r\n    filterList = () => {\r\n        const {toDoList, status} = this.state;\r\n        switch (status) {\r\n            case 'all': {\r\n                return toDoList;\r\n            }\r\n            case 'active': {\r\n                return toDoList.filter(toDoItem => toDoItem.active);\r\n            }\r\n            case 'completed': {\r\n                return toDoList.filter(toDoItem => !toDoItem.active);\r\n            }\r\n            default:\r\n                throw new Error('Unexpected error');\r\n        }\r\n    };\r\n\r\n    onUnload = () => {\r\n        const {toDoList, status} = this.state;\r\n        localStorage.setItem(\r\n            'toDoList',\r\n            JSON.stringify(\r\n                toDoList.map(toDoItem => ({\r\n                    value: toDoItem.value,\r\n                    active: toDoItem.active\r\n                }))\r\n            )\r\n        );\r\n        localStorage.setItem('status', status);\r\n    };\r\n\r\n    render() {\r\n        const {text, toDoList, status, counter} = this.state;\r\n        return (\r\n            <div className=\"task-list\">\r\n                <Button.Group fluid className=\"filter-list\">\r\n                    <Button\r\n                        disabled={status === 'all'}\r\n                        onClick={this.taskFilter}\r\n                    >\r\n                        All\r\n                    </Button>\r\n                    <Button\r\n                        disabled={status === 'active'}\r\n                        onClick={this.taskFilter}\r\n                    >\r\n                        Active\r\n                    </Button>\r\n                    <Button\r\n                        disabled={status === 'completed'}\r\n                        onClick={this.taskFilter}\r\n                    >\r\n                        Completed\r\n                    </Button>\r\n                </Button.Group>\r\n                <Form className=\"task-form\" onSubmit={this.handleSubmit}>\r\n                    <Form.Input\r\n                        fluid\r\n                        className=\"task-bar\"\r\n                        name=\"text\"\r\n                        value={text}\r\n                        onChange={this.handleChange}\r\n                        action=\"Add task\"\r\n                        required\r\n                        placeholder=\"Your task...\"\r\n                    />\r\n                    {toDoList.length > 0 && (\r\n                        <TaskList\r\n                            list={this.filterList()}\r\n                            taskChangeState={this.taskChangeState}\r\n                            deleteTask={this.deleteTask}\r\n                        />\r\n                    )}\r\n                </Form>\r\n                {this.filterList().length > 0 && (\r\n                    <Footer\r\n                        clear={this.deleteFinishedTasks}\r\n                        counter={counter}\r\n                        showButton={\r\n                            toDoList.filter(toDoItem => !toDoItem.active)\r\n                                .length > 0\r\n                        }\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './styles.css';\n\nconst Header = () => (\n  <header className=\"main-header\">\n    <h1 className=\"main-header__title\">\n      <i className=\"list alternate outline icon\" />\n          Todo App\n    </h1>\n    <a href=\"https://github.com/flymans\">\n      <i className=\"huge github icon\" />\n    </a>\n  </header>\n);\nexport default Header;\n","import React from 'react';\nimport AddTaskBar from './components/AddTaskBar';\nimport Header from './components/Header';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <AddTaskBar />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}